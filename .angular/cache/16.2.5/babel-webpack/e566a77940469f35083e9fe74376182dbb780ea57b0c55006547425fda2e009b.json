{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let EditStudentComponent = class EditStudentComponent {\n  constructor(route, stdService, fb, toastr) {\n    this.route = route;\n    this.stdService = stdService;\n    this.fb = fb;\n    this.toastr = toastr;\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.studentId = +params['id'];\n      console.log('Student ID:', this.studentId);\n      // Initialize the form group here\n      this.studentForm = this.fb.group({\n        name: ['', Validators.required],\n        email: ['', Validators.required],\n        dob: [''],\n        gender: [''],\n        address: ['']\n      });\n      // Fetch student data and then patch the values\n      this.stdService.edit(this.studentId).subscribe(data => {\n        const date = new Date(data.dob);\n        const formattedDate = date.toISOString().split('T')[0]; // Extract the date portion\n        console.log(formattedDate);\n        console.log(\"student data: \", data);\n        this.studentForm.patchValue({\n          name: data.name,\n          email: data.email,\n          dob: formattedDate,\n          gender: data.gender,\n          address: data.address\n        });\n      });\n    });\n  }\n  onSubmit() {\n    if (this.studentForm.valid) {\n      // Get the form data\n      const studentData = this.studentForm.value;\n      // Add the id to the studentData object\n      studentData.id = this.studentId;\n      console.log(studentData);\n      // Call your service to update the student data\n      this.stdService.store(studentData).subscribe(response => {\n        console.log('Student updated successfully:', response);\n        // Optionally, you can navigate to a different page or handle the success accordingly\n      }, error => {\n        console.error('Error updating student:', error);\n        // Handle the error, such as showing an error message to the user\n      });\n    }\n  }\n};\n\nEditStudentComponent = __decorate([Component({\n  selector: 'app-edit-student',\n  templateUrl: './edit-student.component.html',\n  styleUrls: ['./edit-student.component.css']\n})], EditStudentComponent);","map":{"version":3,"names":["Component","Validators","EditStudentComponent","constructor","route","stdService","fb","toastr","ngOnInit","params","subscribe","studentId","console","log","studentForm","group","name","required","email","dob","gender","address","edit","data","date","Date","formattedDate","toISOString","split","patchValue","onSubmit","valid","studentData","value","id","store","response","error","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\AngularWorkspace\\StudentManagement\\src\\app\\edit-student\\edit-student.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StudentService } from '../services/student.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-edit-student',\n  templateUrl: './edit-student.component.html',\n  styleUrls: ['./edit-student.component.css']\n})\nexport class EditStudentComponent implements OnInit {\n  studentForm!: FormGroup;\n  studentId!: any;\n\n  constructor(\n    private route: ActivatedRoute, \n    private stdService: StudentService, \n    private fb: FormBuilder,\n    private toastr\n    \n    ) { }\n \n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n       this.studentId = +params['id'];\n      console.log('Student ID:', this.studentId);\n\n      // Initialize the form group here\n      this.studentForm = this.fb.group({\n        name: ['', Validators.required],\n        email: ['', Validators.required],\n        dob: [''],\n        gender: [''],\n        address: ['']\n      });\n\n\n    \n\n\n      // Fetch student data and then patch the values\n      this.stdService.edit(this.studentId).subscribe(data => {\n\n        const date = new Date(data.dob);\n        const formattedDate = date.toISOString().split('T')[0]; // Extract the date portion\n\n        console.log(formattedDate)\n\n        console.log(\"student data: \", data);\n        this.studentForm.patchValue({\n          name: data.name,\n          email: data.email,\n          dob: formattedDate,\n          gender: data.gender,\n          address: data.address\n        });\n      });\n    });\n  }\n\n  onSubmit() {\n    if (this.studentForm.valid) {\n      // Get the form data\n      const studentData = this.studentForm.value;\n  \n      // Add the id to the studentData object\n      studentData.id = this.studentId;\n\n      console.log(studentData);\n  \n      // Call your service to update the student data\n      this.stdService.store(studentData).subscribe(response => {\n        console.log('Student updated successfully:', response);\n  \n        // Optionally, you can navigate to a different page or handle the success accordingly\n      }, error => {\n        console.error('Error updating student:', error);\n        // Handle the error, such as showing an error message to the user\n      });\n    }\n  }\n  \n  \n  \n\n\n\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAGjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAO5D,WAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAI/BC,YACUC,KAAqB,EACrBC,UAA0B,EAC1BC,EAAe,EACfC,MAAM;IAHN,KAAAH,KAAK,GAALA,KAAK;IACL,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,EAAE,GAAFA,EAAE;IACF,KAAAC,MAAM,GAANA,MAAM;EAEV;EAGNC,QAAQA,CAAA;IACN,IAAI,CAACJ,KAAK,CAACK,MAAM,CAACC,SAAS,CAACD,MAAM,IAAG;MAClC,IAAI,CAACE,SAAS,GAAG,CAACF,MAAM,CAAC,IAAI,CAAC;MAC/BG,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,IAAI,CAACF,SAAS,CAAC;MAE1C;MACA,IAAI,CAACG,WAAW,GAAG,IAAI,CAACR,EAAE,CAACS,KAAK,CAAC;QAC/BC,IAAI,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACgB,QAAQ,CAAC;QAC/BC,KAAK,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACgB,QAAQ,CAAC;QAChCE,GAAG,EAAE,CAAC,EAAE,CAAC;QACTC,MAAM,EAAE,CAAC,EAAE,CAAC;QACZC,OAAO,EAAE,CAAC,EAAE;OACb,CAAC;MAMF;MACA,IAAI,CAAChB,UAAU,CAACiB,IAAI,CAAC,IAAI,CAACX,SAAS,CAAC,CAACD,SAAS,CAACa,IAAI,IAAG;QAEpD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,IAAI,CAACJ,GAAG,CAAC;QAC/B,MAAMO,aAAa,GAAGF,IAAI,CAACG,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAExDhB,OAAO,CAACC,GAAG,CAACa,aAAa,CAAC;QAE1Bd,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEU,IAAI,CAAC;QACnC,IAAI,CAACT,WAAW,CAACe,UAAU,CAAC;UAC1Bb,IAAI,EAAEO,IAAI,CAACP,IAAI;UACfE,KAAK,EAAEK,IAAI,CAACL,KAAK;UACjBC,GAAG,EAAEO,aAAa;UAClBN,MAAM,EAAEG,IAAI,CAACH,MAAM;UACnBC,OAAO,EAAEE,IAAI,CAACF;SACf,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAS,QAAQA,CAAA;IACN,IAAI,IAAI,CAAChB,WAAW,CAACiB,KAAK,EAAE;MAC1B;MACA,MAAMC,WAAW,GAAG,IAAI,CAAClB,WAAW,CAACmB,KAAK;MAE1C;MACAD,WAAW,CAACE,EAAE,GAAG,IAAI,CAACvB,SAAS;MAE/BC,OAAO,CAACC,GAAG,CAACmB,WAAW,CAAC;MAExB;MACA,IAAI,CAAC3B,UAAU,CAAC8B,KAAK,CAACH,WAAW,CAAC,CAACtB,SAAS,CAAC0B,QAAQ,IAAG;QACtDxB,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEuB,QAAQ,CAAC;QAEtD;MACF,CAAC,EAAEC,KAAK,IAAG;QACTzB,OAAO,CAACyB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C;MACF,CAAC,CAAC;;EAEN;CAQD;;AA/EYnC,oBAAoB,GAAAoC,UAAA,EALhCtC,SAAS,CAAC;EACTuC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACWvC,oBAAoB,CA+EhC"},"metadata":{},"sourceType":"module","externalDependencies":[]}