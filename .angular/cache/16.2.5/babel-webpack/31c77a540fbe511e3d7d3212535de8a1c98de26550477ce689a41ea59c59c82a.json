{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/student.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"ngx-toastr\";\nexport class EditStudentComponent {\n  constructor(route, stdService, fb, toastrService) {\n    this.route = route;\n    this.stdService = stdService;\n    this.fb = fb;\n    this.toastrService = toastrService;\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.studentId = +params['id'];\n      console.log('Student ID:', this.studentId);\n      // Initialize the form group here\n      this.studentForm = this.fb.group({\n        name: ['', Validators.required],\n        email: ['', Validators.required],\n        dob: [''],\n        gender: [''],\n        address: ['']\n      });\n      // Fetch student data and then patch the values\n      this.stdService.edit(this.studentId).subscribe(data => {\n        const date = new Date(data.dob);\n        const formattedDate = date.toISOString().split('T')[0]; // Extract the date portion\n        console.log(formattedDate);\n        console.log(\"student data: \", data);\n        this.studentForm.patchValue({\n          name: data.name,\n          email: data.email,\n          dob: formattedDate,\n          gender: data.gender,\n          address: data.address\n        });\n      });\n    });\n  }\n  onSubmit() {\n    if (this.studentForm.valid) {\n      // Get the form data\n      const studentData = this.studentForm.value;\n      // Add the id to the studentData object\n      studentData.id = this.studentId;\n      console.log(studentData);\n      // Call your service to update the student data\n      this.stdService.store(studentData).subscribe(response => {\n        console.log('Student updated successfully:', response);\n        this.toastrService.showSucess();\n        // Optionally, you can navigate to a different page or handle the success accordingly\n      }, error => {\n        console.error('Error updating student:', error);\n        // Handle the error, such as showing an error message to the user\n      });\n    }\n  }\n  static #_ = this.ɵfac = function EditStudentComponent_Factory(t) {\n    return new (t || EditStudentComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.StudentService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.ToastrService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditStudentComponent,\n    selectors: [[\"app-edit-student\"]],\n    decls: 29,\n    vars: 4,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"studentName\"], [\"type\", \"text\", \"formControlName\", \"name\", 1, \"form-control\"], [\"for\", \"studentEmail\"], [\"type\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"studentDOB\"], [\"type\", \"date\", \"formControlName\", \"dob\", 1, \"form-control\"], [\"for\", \"studentGender\"], [\"formControlName\", \"gender\", \"name\", \"gender\", 1, \"form-control\"], [3, \"ngValue\"], [\"for\", \"studentAddress\"], [\"formControlName\", \"address\", \"rows\", \"3\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mt-3\"]],\n    template: function EditStudentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function EditStudentComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"label\", 2);\n        i0.ɵɵtext(3, \"Name:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 1)(6, \"label\", 4);\n        i0.ɵɵtext(7, \"Email:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 1)(10, \"label\", 6);\n        i0.ɵɵtext(11, \"Date of Birth:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 1)(14, \"label\", 8);\n        i0.ɵɵtext(15, \"Gender:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"select\", 9)(17, \"option\", 10);\n        i0.ɵɵtext(18, \"Male\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"option\", 10);\n        i0.ɵɵtext(20, \"Female\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"option\", 10);\n        i0.ɵɵtext(22, \"Other\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(23, \"div\", 1)(24, \"label\", 11);\n        i0.ɵɵtext(25, \"Address:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(26, \"textarea\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"button\", 13);\n        i0.ɵɵtext(28, \"Submit\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.studentForm);\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"ngValue\", \"Male\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngValue\", \"Female\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngValue\", \"Others\");\n      }\n    },\n    dependencies: [i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","EditStudentComponent","constructor","route","stdService","fb","toastrService","ngOnInit","params","subscribe","studentId","console","log","studentForm","group","name","required","email","dob","gender","address","edit","data","date","Date","formattedDate","toISOString","split","patchValue","onSubmit","valid","studentData","value","id","store","response","showSucess","error","_","i0","ɵɵdirectiveInject","i1","ActivatedRoute","i2","StudentService","i3","FormBuilder","i4","ToastrService","_2","selectors","decls","vars","consts","template","EditStudentComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","EditStudentComponent_Template_form_ngSubmit_0_listener","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵproperty","ɵɵadvance"],"sources":["D:\\AngularWorkspace\\StudentManagement\\src\\app\\edit-student\\edit-student.component.ts","D:\\AngularWorkspace\\StudentManagement\\src\\app\\edit-student\\edit-student.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StudentService } from '../services/student.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-edit-student',\n  templateUrl: './edit-student.component.html',\n  styleUrls: ['./edit-student.component.css']\n})\nexport class EditStudentComponent implements OnInit {\n  studentForm!: FormGroup;\n  studentId!: any;\n\n  constructor(\n    private route: ActivatedRoute, \n    private stdService: StudentService, \n    private fb: FormBuilder,\n    private toastrService : ToastrService\n    \n    ) { }\n \n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n       this.studentId = +params['id'];\n      console.log('Student ID:', this.studentId);\n\n      // Initialize the form group here\n      this.studentForm = this.fb.group({\n        name: ['', Validators.required],\n        email: ['', Validators.required],\n        dob: [''],\n        gender: [''],\n        address: ['']\n      });\n\n\n    \n\n\n      // Fetch student data and then patch the values\n      this.stdService.edit(this.studentId).subscribe(data => {\n\n        const date = new Date(data.dob);\n        const formattedDate = date.toISOString().split('T')[0]; // Extract the date portion\n\n        console.log(formattedDate)\n\n        console.log(\"student data: \", data);\n        this.studentForm.patchValue({\n          name: data.name,\n          email: data.email,\n          dob: formattedDate,\n          gender: data.gender,\n          address: data.address\n        });\n      });\n    });\n  }\n\n  onSubmit() {\n    if (this.studentForm.valid) {\n      // Get the form data\n      const studentData = this.studentForm.value;\n  \n      // Add the id to the studentData object\n      studentData.id = this.studentId;\n\n      console.log(studentData);\n  \n      // Call your service to update the student data\n      this.stdService.store(studentData).subscribe(response => {\n        console.log('Student updated successfully:', response);\n        this.toastrService.showSucess()\n        // Optionally, you can navigate to a different page or handle the success accordingly\n      }, error => {\n        console.error('Error updating student:', error);\n        // Handle the error, such as showing an error message to the user\n      });\n    }\n  }\n  \n  \n  \n\n\n\n\n}\n","<form [formGroup]=\"studentForm\" (ngSubmit)=\"onSubmit()\">\n    <!-- Student Name -->\n    <div class=\"form-group\">\n      <label for=\"studentName\">Name:</label>\n      <input type=\"text\" class=\"form-control\" formControlName=\"name\">\n    </div>\n  \n    <!-- Student Email -->\n    <div class=\"form-group\">\n      <label for=\"studentEmail\">Email:</label>\n      <input type=\"email\" class=\"form-control\" formControlName=\"email\">\n    </div>\n  \n    <!-- Student Date of Birth -->\n    <div class=\"form-group\">\n      <label for=\"studentDOB\">Date of Birth:</label>\n      <input type=\"date\" class=\"form-control\" formControlName=\"dob\">\n    </div>\n  \n    <!-- Student Gender -->\n    <div class=\"form-group\">\n      <label for=\"studentGender\">Gender:</label>\n      <select class=\"form-control\" formControlName=\"gender\" name=\"gender\" >\n        <option [ngValue]=\"'Male'\">Male</option>\n        <option [ngValue]=\"'Female'\">Female</option>\n        <option [ngValue]=\"'Others'\">Other</option>\n    </select>\n    </div>\n  \n    <!-- Student Address -->\n    <div class=\"form-group\">\n      <label for=\"studentAddress\">Address:</label>\n      <textarea class=\"form-control\" formControlName=\"address\" rows=\"3\"></textarea>\n    </div>\n  \n    <!-- Submit Button -->\n    <button type=\"submit\" class=\"btn btn-primary mt-3\">Submit</button>\n  </form>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}